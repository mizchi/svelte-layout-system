{"/components/block/ImageBlock.svelte":"<script lang=\"ts\">\n  export let src: string;\n  export let width: string = \"auto\";\n  export let height: string = \"auto\";\n  export let round: boolean = false;\n  export let id: string;\n  export let style: string = \"\";\n\n  $: radius = round ? \"50%\" : \"0\";\n</script>\n\n<div {id} class=\"container\" {style}>\n  <div class=\"wrapper\" style=\"width: {width}; height: {height};\">\n    <img\n      class=\"g\"\n      {src}\n      alt=\"image\"\n      loading=\"lazy\"\n      {width}\n      {height}\n      style=\"border-radius: {radius}\"\n    />\n  </div>\n</div>\n\n<style>\n  .container {\n    width: 100%;\n    height: 100%;\n  }\n  .wrapper {\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n</style>\n","/components/block/ParagraphBlock.svelte":"<script lang=\"ts\">\n  export let id: string = `box_${Math.random().toString(32).substring(2)}`;\n  export let style: string = \"\";\n</script>\n\n<div class=\"text\" {id} {style}>\n  <slot />\n</div>\n\n<style>\n  .text {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n  }\n</style>\n","/components/block/TextButtonBlock.svelte":"<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n  export let text: string;\n  export let id: string;\n  export let style: string = \"\";\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<div {id} class=\"container\" {style}>\n  <button class=\"inner\" on:click={() => dispatch(\"click\")}>\n    {text}\n  </button>\n</div>\n\n<style>\n  .container {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    font-size: 12px;\n    line-height: 1.66667;\n    padding: 3px;\n  }\n  .inner {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    box-sizing: border-box;\n    display: inline-block;\n    border-radius: 4px;\n    background-color: #333;\n    color: #eee;\n    text-decoration: none;\n    text-align: center;\n  }\n  .inner:hover,\n  .inner:focus {\n    opacity: 0.75;\n  }\n</style>\n","/components/block/TitleBlock.svelte":"<script lang=\"ts\">\n  export let id: string;\n  export let style: string = \"\";\n</script>\n\n<div class=\"text\" {id} {style}>\n  <slot />\n</div>\n\n<style>\n  .text {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n  }\n</style>\n","/components/Flex.svelte":"<script lang=\"ts\">\n  export let style: string = \"\";\n  export let direction: \"column\" | \"row\" = \"row\";\n  export let display: \"inline-flex\" | \"flex\" = \"flex\";\n  export let width: string = \"100%\";\n  export let height: string = \"auto\";\n  export let flex: string = \"0 1 auto\";\n\n  // export let maxWidth: string = '100%';\n\n  const id = `box_${Math.random().toString(32).substring(2)}`;\n</script>\n\n<div\n  {id}\n  style={`display:${display};\nflex-direction: ${direction};\nwidth: ${width};\nheight: ${height};\nflex: ${flex};\n${style}\n`}\n>\n  <slot />\n</div>\n","/components/index.ts":"export { default as Route } from \"./Route.svelte\";\n// @ts-ignore\nexport { default as Router, initMemoryRouter } from \"./Router.svelte\";\nexport { default as Modal } from \"./Modal.svelte\";\nexport { default as Flex } from \"./Flex.svelte\";\n\nexport { default as TextButtonBlock } from \"./block/TextButtonBlock.svelte\";\nexport { default as ImageBlock } from \"./block/ImageBlock.svelte\";\nexport { default as ParagraphBlock } from \"./block/ParagraphBlock.svelte\";\nexport { default as TitleBlock } from \"./block/TitleBlock.svelte\";\n","/components/Modal.svelte":"<script lang=\"ts\">\n  import { createEventDispatcher, onDestroy } from \"svelte\";\n\n  export let width: string = \"auto\";\n  export let height: string = \"auto\";\n  // export let position: string = \"center\";\n  export let opened: boolean;\n  export let fog: boolean = false;\n  export let zIndex: number = 1000;\n\n  const dispatch = createEventDispatcher();\n  const close = () => dispatch(\"close\");\n\n  let modal: HTMLElement | null = null;\n\n  const handle_keydown = (e: any) => {\n    if (e.key === \"Escape\") {\n      close();\n      return;\n    }\n    if (e.key === \"Tab\" && modal) {\n      // trap focus\n      const nodes = modal.querySelectorAll(\"*\");\n      const tabbable = Array.from(nodes).filter(\n        // @ts-ignore\n        (n: HTMLElement) => n.tabIndex >= 0\n      ) as HTMLElement[];\n\n      let index = tabbable.indexOf(document.activeElement as HTMLElement);\n      if (index === -1 && e.shiftKey) index = 0;\n\n      index += tabbable.length + (e.shiftKey ? -1 : 1);\n      index %= tabbable.length;\n\n      tabbable[index].focus();\n      e.preventDefault();\n    }\n  };\n\n  const previously_focused =\n    typeof document !== \"undefined\" && (document.activeElement as HTMLElement);\n\n  if (previously_focused) {\n    onDestroy(() => {\n      previously_focused?.focus();\n    });\n  }\n</script>\n\n<svelte:window on:keydown={handle_keydown} />\n\n{#if opened}\n  {#if fog}\n    <div class=\"modal-background\" on:click={close} />\n  {/if}\n\n  <div\n    class=\"modal\"\n    role=\"dialog\"\n    aria-modal=\"true\"\n    bind:this={modal}\n    style=\"\nwidth:{width};\nheight:{height};\nz-index:{zIndex};\n\"\n  >\n    <slot />\n    <!-- svelte-ignore a11y-autofocus -->\n    <button autofocus on:click={close}> close modal </button>\n  </div>\n{/if}\n\n<style>\n  .modal-background {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.3);\n  }\n  .modal {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    /* width: calc(100vw - 4em); */\n    max-width: 32em;\n    max-height: calc(100vh - 4em);\n    overflow: auto;\n    transform: translate(-50%, -50%);\n    padding: 1em;\n    border-radius: 0.2em;\n    background: white;\n  }\n  button {\n    display: block;\n  }\n</style>\n","/components/Route.svelte":"<script lang=\"ts\">\n  import { getRouterContext } from \"./Router.svelte\";\n  export let path: string;\n  const { currentPath } = getRouterContext();\n</script>\n\n{#if $currentPath === path}\n  <slot />\n{/if}\n","/components/Router.svelte":"<script lang=\"ts\" context=\"module\">\n  import type { Writable } from \"svelte/store\";\n  import { getContext } from \"svelte\";\n  import { writable } from \"svelte/store\";\n\n  export type RouterContext = {\n    __symbol: string;\n    currentPath: Writable<string>;\n    push(path: string): void;\n  };\n\n  const SYMBOL = \"router:\" + Math.random().toString(16);\n  export const getRouterContext = () => getContext<RouterContext>(SYMBOL);\n  export const initMemoryRouter = (initialPath: string = \"/\") => {\n    const currentPath = writable(initialPath);\n    const ctx: RouterContext = {\n      __symbol: SYMBOL,\n      currentPath,\n      push(path: string) {\n        currentPath.set(path);\n      },\n    };\n    return ctx;\n  };\n</script>\n\n<script lang=\"ts\">\n  import { setContext } from \"svelte\";\n\n  export let router: RouterContext;\n  setContext(router.__symbol, router);\n</script>\n\n<slot />\n","/components/routerMod.ts":"import type { Writable } from \"svelte/store\";\nimport { getContext } from \"svelte\";\nimport { writable } from \"svelte/store\";\n\nexport type RouterContext = {\n  __symbol: string;\n  currentPath: Writable<string>;\n  push(path: string): void;\n};\n\nconst SYMBOL = \"router:\" + Math.random().toString(16);\nexport const getRouterContext = () => getContext<RouterContext>(SYMBOL);\nexport const initMemoryRouter = (initialPath: string = \"/\") => {\n  const currentPath = writable(initialPath);\n  const ctx: RouterContext = {\n    __symbol: SYMBOL,\n    currentPath,\n    push(path: string) {\n      currentPath.set(path);\n    },\n  };\n  return ctx;\n};\n","/Main.svelte":"<script lang=\"ts\">\n  import { fade } from \"svelte/transition\";\n  import { onMount } from \"svelte\";\n  import {\n    Router,\n    Route,\n    Modal,\n    Flex,\n    ParagraphBlock,\n    TextButtonBlock,\n    ImageBlock,\n    initMemoryRouter,\n  } from \"./components/index\";\n  const router = initMemoryRouter(\"/\");\n  let opened = true;\n  let close = () => {\n    opened = false;\n  };\n  onMount(() => {});\n</script>\n\n<Router {router}>\n  <Route path=\"/\">\n    <Modal {opened} on:close={close} fog={false}>\n      <Flex direction=\"column\" width=\"300px\" height=\"300px\">\n        <Flex height=\"32px\">\n          <TextButtonBlock\n            id=\"top-left\"\n            text=\"Index\"\n            on:click={() => router.push(\"/\")}\n          />\n          <TextButtonBlock\n            id=\"top-right\"\n            text=\"About\"\n            on:click={() => router.push(\"/about\")}\n          />\n        </Flex>\n        <Flex flex=\"1\" height=\"150px\">\n          <ImageBlock\n            id=\"image\"\n            height=\"150px\"\n            src=\"https://i.imgur.com/nAnqC.jpg\"\n          />\n        </Flex>\n        <Flex flex=\"1\">\n          <Flex flex=\"1\">\n            <ParagraphBlock id=\"left\">XXX</ParagraphBlock>\n          </Flex>\n          <Flex flex=\"1\">\n            <ParagraphBlock id=\"right\">YYY</ParagraphBlock>\n          </Flex>\n        </Flex>\n        <Flex style=\"height: 50px; background: #ccc\">\n          <TextButtonBlock id=\"bottom-button\" text=\"Next\" />\n        </Flex>\n      </Flex>\n    </Modal>\n  </Route>\n  <Route path=\"/about\">\n    <Modal {opened} on:close={close} fog={true}>\n      <div transition:fade>\n        <Flex direction=\"column\" width=\"300px\" height=\"300px\">\n          <Flex flex=\"1\">\n            <TextButtonBlock\n              id=\"top-left\"\n              text=\"Back\"\n              on:click={() => router.push(\"/\")}\n            />\n          </Flex>\n        </Flex>\n      </div>\n    </Modal>\n  </Route>\n</Router>\n"}